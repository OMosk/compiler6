parsing


file(...) {
  Repetition(
    Alternative(
      {loadDirective, [](AST *loadDirective) -> AST*{
      }},
    ),
    
  [] (Array<AST *> items) {
  })
}

loadDirective() {
  Sequence({TokenLoadDirective, TokenStringLiteral}, [](Array<AST *> seq) -> AST* {
  })
}

#define MATCHER(parseFile) \

AST *parseFile(td, p, l, e) {
  auto stateBefore = saveState();
  auto *result = parseFileDetail(td, parser, lexer, e);
  if (!result) {
    
  }
}

AST *parseFile __impl(td, p, l, e) {
  for(;;) {
    AST *entry = NULL;
    ALT_MATCH_EXPR(entry, parseDeclaration);
    ALT_MATCH_EXPR(entry, parseLoadDirective);
    MATCH_EXPR(decl, parseDeclaration);

    ALTERNATIVES_END();

  }
}
