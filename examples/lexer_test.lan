function printf(fmt *i8, ...) i32 #foreign;
//printf :: (fmt *i8, ...) #foreign;

function main (argc i32, argv **i8) i32 {
  var i,j,k i32;
  var n i32 = 0;
  var a, b, c f64 = 1.1, 0.0, 3.14;
  var x f64 = (0);
  var y f64 = 1 + 2;
  var z f64 = 3 + 4 + 5;
  var z1 f64 = 3 + 4 * 5;
  var z2 f64 = (3 + 4) * 5;
  var z3 f64 = 1/2/3/4/5;
  var z4 f64 = 1/2/3/(4+6)/5;

  {
    //block test
    var z5 f64 = 3 + 4 * 5;
  }

  var z6 f64 = printf(1, max(1, 1.0), 3);

  if (z6 == 0) {
    z7 := 0;
    z8, z9 := 1.0, 2.0;
    //it works nicely
  }

  defer {
    printf("It works");
  }

  while (itWorks) {
    itWorks();
  }

  //var z6, z7 f64 = 0;
  //var z5 f64 = 0, 0;
  //printf("main() works %f\n".addr, (420.0 * 1.5).(f64));
  //i := 0;
  //printf("arguments started\n".addr);
  //while i < argc {
  //  printf("[%ld] = %s\n".addr, i, argv[i]);
  //  i = i + 1;
  //}
  //printf("arguments ended\n".addr);
}
