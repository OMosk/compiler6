TODO
- IR generator
- Backend
- Async IO
- Job system
- HashTable

GOALS
- Totally standalone compiler
- generate own bytecode with basic block/ssa/code flow analysis
- bytecode executer ?
- amd64 code emitter
- multithreaded


ARCHITECTURE

Data transformation

reading file     -- bytes->
lexing           -- tokens->
pasring          -- ast->
typechecking     -- ??? Types/Functions (ir code emitting)/ Name resolution
                 -- ir(references ast for debug info)->
?ir-optimization -- ir
codegeneration   -- machine-code(references ast for debug info)->
linking          -- elf-binary

AST for source code represantation?

IR types/functions

IRBase {
  ASTNode *ast;
  uin16_t flags;
  uint8_t kind
}

Derived

  IRModule {
  }

  IRFunction {

  }

  IRBlock {

  }

  IRType {

  }

IRInstruction {
}

// ?IRScope {
//}

struct Declaration {
  ASTNode *node;
  enum kind PROC|TYPE|VARIABLE|CONSTANT|MODULE
};



struct Scope {
  MultiMap<Str, Declaration *>
}

struct ProcDeclaration: Declaration {
  TypeInfo *typeinfo;
  IRProc *proc;
  IRBlock *initBlock;
}

struct VariableDeclaration: Declaration {
  TypeInfo *typeinfo;
  IRValue address;
}

Compiler algorithm:
[
1. Queue up file read
2. Queue up tokenization/parsing of file
] //Easy to parallelize

3. Prepass file
  * Queue new files to step 1
  * Lock typer?
    * Register names
  * Unlock typer
4. If last file of module and module is entry "main" schedule typecheck of all symbols

Typechecking of functions:
1. Typecheck protype, set function type
  1.1 If some types are not typechecked then typecheck them recursively
2. Typecheck Body:
  2.1 If some types are not typechecked then typecheck them recursively
  2.2 If some functions are not typechecked then prototype of function

Typechecking of type:
1. Check all members
  1.1 If some types are not typechecked then typecheck them recursively

Multithreaded typechecker
1. Lock typechecker
2. Check if fully typechecked
  2.1 If yes Unlock exit
3. Check if in progress
  3.1 If yes Unlock exit
4. Set In progress flag
5. Unlock
6. Typecheck declaration
7. Lock typechecker
8. Set typecked, unset in progress
9. Unlock typechecker
